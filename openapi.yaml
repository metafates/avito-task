openapi: 3.1.0
info:
  title: AvitoTech Backend Assignment
  version: 0.1.0
  summary: Assignment for AvitoTech 2023 backend internship
  contact:
    email: vvz.dev@gmail.com
externalDocs:
  description: README
  url: https://github.com/metafates/avito-task/blob/main/README.md
paths:
  /audit:
    get:
      summary: Get audit of changes
      parameters:
        - in: query
          name: from
          description: Start date of the audit window
          required: false
          schema:
            $ref: '#/components/schemas/Date'
        - in: query
          name: to
          description: End date of the audit window
          required: false
          schema:
            $ref: '#/components/schemas/Date'
        - in: query
          name: user
          description: Show audit for specifc user with the given id
          required: false
          schema:
            $ref: '#/components/schemas/UserID'
      responses:
        '200':
          description: Audit of changes
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/CSV'
  /segments/{slug}:
    parameters:
      - $ref: '#/components/parameters/Slug'
    post:
      summary: Create a new segment
      requestBody:
        $ref: '#/components/requestBodies/SegmentCreation'
      responses:
        '201':
          description: Segment succesfully created
        '409':
          description: Segment with this slug exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a segment
      responses:
        '200':
          description: Segment successfully deleted
        '404':
          description: Segment with the given slug was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/User'
    post:
      summary: Create a new user
      responses:
        '201':
          description: User created
        '409':
          description: User exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/segments:
    parameters:
      - $ref: '#/components/parameters/User'
    get:
      summary: Get active segments assigned to a user
      responses:
        '200':
          description: Segments assigned to a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSegment'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/segments/{slug}:
    parameters:
      - $ref: '#/components/parameters/User'
      - $ref: '#/components/parameters/Slug'
    post:
      summary: Assign segment to a user
      requestBody:
        $ref: '#/components/requestBodies/SegmentAssignment'
      responses:
        '200':
          description: Segment assigned
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Segment already assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Either user or segment slug was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deprive segment from a user
      responses:
        '200':
          description: Segment deprived
        '404':
          description: Either user or segment slug was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    CSV:
      type: string
      format: csv
    Date:
      type: string
      format: date
    Timestamp:
      type: string
      format: date-time
    Outreach:
      type: number
      format: float
      minimum: 0
      maximum: 1
    UserID:
      # type: string
      type: integer
      format: int32
    Slug:
      type: string
      minLength: 1
    UserSegment:
      type: object
      required:
        - slug
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        expiresAt:
          $ref: '#/components/schemas/Timestamp'
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
  requestBodies:
    SegmentAssignment:
      description: Assign segment to a user
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              expiresAt:
                $ref: '#/components/schemas/Timestamp'
    SegmentCreation:
      description: Create a new segment
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              outreach:
                $ref: '#/components/schemas/Outreach'
  parameters:
    Slug:
      in: path
      name: slug
      description: Segment slug
      required: true
      schema:
        $ref: '#/components/schemas/Slug'
    User:
      in: path
      name: id
      description: User ID to work with
      required: true
      schema:
        $ref: '#/components/schemas/UserID'
