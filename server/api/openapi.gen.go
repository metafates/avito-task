// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// Outreach defines model for Outreach.
type Outreach = float32

// Slug defines model for Slug.
type Slug = string

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// UserID defines model for UserID.
type UserID = string

// UserSegment defines model for UserSegment.
type UserSegment struct {
	Expires *Timestamp `json:"expires,omitempty"`
	Slug    Slug       `json:"slug"`
}

// SegmentAssignment defines model for SegmentAssignment.
type SegmentAssignment struct {
	Expires *Timestamp `json:"expires,omitempty"`
}

// SegmentCreation defines model for SegmentCreation.
type SegmentCreation struct {
	Outreach *Outreach `json:"outreach,omitempty"`
}

// PostSegmentsSlugJSONBody defines parameters for PostSegmentsSlug.
type PostSegmentsSlugJSONBody struct {
	Outreach *Outreach `json:"outreach,omitempty"`
}

// PostUsersIdSegmentsSlugJSONBody defines parameters for PostUsersIdSegmentsSlug.
type PostUsersIdSegmentsSlugJSONBody struct {
	Expires *Timestamp `json:"expires,omitempty"`
}

// PostSegmentsSlugJSONRequestBody defines body for PostSegmentsSlug for application/json ContentType.
type PostSegmentsSlugJSONRequestBody PostSegmentsSlugJSONBody

// PostUsersIdSegmentsSlugJSONRequestBody defines body for PostUsersIdSegmentsSlug for application/json ContentType.
type PostUsersIdSegmentsSlugJSONRequestBody PostUsersIdSegmentsSlugJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a segment
	// (DELETE /segments/{slug})
	DeleteSegmentsSlug(ctx echo.Context, slug Slug) error
	// Create a new segment
	// (POST /segments/{slug})
	PostSegmentsSlug(ctx echo.Context, slug Slug) error
	// Create a new user
	// (POST /users/{id})
	PostUsersId(ctx echo.Context, id UserID) error
	// Get active segments assigned to a user
	// (GET /users/{id}/segments)
	GetUsersIdSegments(ctx echo.Context, id UserID) error
	// Deprive segment from a user
	// (DELETE /users/{id}/segments/{slug})
	DeleteUsersIdSegmentsSlug(ctx echo.Context, id UserID, slug Slug) error
	// Assign segment to a user
	// (POST /users/{id}/segments/{slug})
	PostUsersIdSegmentsSlug(ctx echo.Context, id UserID, slug Slug) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteSegmentsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSegmentsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSegmentsSlug(ctx, slug)
	return err
}

// PostSegmentsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PostSegmentsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSegmentsSlug(ctx, slug)
	return err
}

// PostUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersId(ctx, id)
	return err
}

// GetUsersIdSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersIdSegments(ctx, id)
	return err
}

// DeleteUsersIdSegmentsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersIdSegmentsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersIdSegmentsSlug(ctx, id, slug)
	return err
}

// PostUsersIdSegmentsSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersIdSegmentsSlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersIdSegmentsSlug(ctx, id, slug)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/segments/:slug", wrapper.DeleteSegmentsSlug)
	router.POST(baseURL+"/segments/:slug", wrapper.PostSegmentsSlug)
	router.POST(baseURL+"/users/:id", wrapper.PostUsersId)
	router.GET(baseURL+"/users/:id/segments", wrapper.GetUsersIdSegments)
	router.DELETE(baseURL+"/users/:id/segments/:slug", wrapper.DeleteUsersIdSegmentsSlug)
	router.POST(baseURL+"/users/:id/segments/:slug", wrapper.PostUsersIdSegmentsSlug)

}

type DeleteSegmentsSlugRequestObject struct {
	Slug Slug `json:"slug"`
}

type DeleteSegmentsSlugResponseObject interface {
	VisitDeleteSegmentsSlugResponse(w http.ResponseWriter) error
}

type DeleteSegmentsSlug200Response struct {
}

func (response DeleteSegmentsSlug200Response) VisitDeleteSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSegmentsSlug404JSONResponse Error

func (response DeleteSegmentsSlug404JSONResponse) VisitDeleteSegmentsSlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostSegmentsSlugRequestObject struct {
	Slug Slug `json:"slug"`
	Body *PostSegmentsSlugJSONRequestBody
}

type PostSegmentsSlugResponseObject interface {
	VisitPostSegmentsSlugResponse(w http.ResponseWriter) error
}

type PostSegmentsSlug201Response struct {
}

func (response PostSegmentsSlug201Response) VisitPostSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostSegmentsSlug409JSONResponse Error

func (response PostSegmentsSlug409JSONResponse) VisitPostSegmentsSlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersIdRequestObject struct {
	Id UserID `json:"id"`
}

type PostUsersIdResponseObject interface {
	VisitPostUsersIdResponse(w http.ResponseWriter) error
}

type PostUsersId201Response struct {
}

func (response PostUsersId201Response) VisitPostUsersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostUsersId409JSONResponse Error

func (response PostUsersId409JSONResponse) VisitPostUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdSegmentsRequestObject struct {
	Id UserID `json:"id"`
}

type GetUsersIdSegmentsResponseObject interface {
	VisitGetUsersIdSegmentsResponse(w http.ResponseWriter) error
}

type GetUsersIdSegments200JSONResponse []UserSegment

func (response GetUsersIdSegments200JSONResponse) VisitGetUsersIdSegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdSegments404JSONResponse Error

func (response GetUsersIdSegments404JSONResponse) VisitGetUsersIdSegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersIdSegmentsSlugRequestObject struct {
	Id   UserID `json:"id"`
	Slug Slug   `json:"slug"`
}

type DeleteUsersIdSegmentsSlugResponseObject interface {
	VisitDeleteUsersIdSegmentsSlugResponse(w http.ResponseWriter) error
}

type DeleteUsersIdSegmentsSlug200Response struct {
}

func (response DeleteUsersIdSegmentsSlug200Response) VisitDeleteUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUsersIdSegmentsSlug404JSONResponse Error

func (response DeleteUsersIdSegmentsSlug404JSONResponse) VisitDeleteUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersIdSegmentsSlugRequestObject struct {
	Id   UserID `json:"id"`
	Slug Slug   `json:"slug"`
	Body *PostUsersIdSegmentsSlugJSONRequestBody
}

type PostUsersIdSegmentsSlugResponseObject interface {
	VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error
}

type PostUsersIdSegmentsSlug200Response struct {
}

func (response PostUsersIdSegmentsSlug200Response) VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostUsersIdSegmentsSlug404JSONResponse Error

func (response PostUsersIdSegmentsSlug404JSONResponse) VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersIdSegmentsSlug409JSONResponse Error

func (response PostUsersIdSegmentsSlug409JSONResponse) VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a segment
	// (DELETE /segments/{slug})
	DeleteSegmentsSlug(ctx context.Context, request DeleteSegmentsSlugRequestObject) (DeleteSegmentsSlugResponseObject, error)
	// Create a new segment
	// (POST /segments/{slug})
	PostSegmentsSlug(ctx context.Context, request PostSegmentsSlugRequestObject) (PostSegmentsSlugResponseObject, error)
	// Create a new user
	// (POST /users/{id})
	PostUsersId(ctx context.Context, request PostUsersIdRequestObject) (PostUsersIdResponseObject, error)
	// Get active segments assigned to a user
	// (GET /users/{id}/segments)
	GetUsersIdSegments(ctx context.Context, request GetUsersIdSegmentsRequestObject) (GetUsersIdSegmentsResponseObject, error)
	// Deprive segment from a user
	// (DELETE /users/{id}/segments/{slug})
	DeleteUsersIdSegmentsSlug(ctx context.Context, request DeleteUsersIdSegmentsSlugRequestObject) (DeleteUsersIdSegmentsSlugResponseObject, error)
	// Assign segment to a user
	// (POST /users/{id}/segments/{slug})
	PostUsersIdSegmentsSlug(ctx context.Context, request PostUsersIdSegmentsSlugRequestObject) (PostUsersIdSegmentsSlugResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteSegmentsSlug operation middleware
func (sh *strictHandler) DeleteSegmentsSlug(ctx echo.Context, slug Slug) error {
	var request DeleteSegmentsSlugRequestObject

	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSegmentsSlug(ctx.Request().Context(), request.(DeleteSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSegmentsSlug")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSegmentsSlugResponseObject); ok {
		return validResponse.VisitDeleteSegmentsSlugResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostSegmentsSlug operation middleware
func (sh *strictHandler) PostSegmentsSlug(ctx echo.Context, slug Slug) error {
	var request PostSegmentsSlugRequestObject

	request.Slug = slug

	var body PostSegmentsSlugJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSegmentsSlug(ctx.Request().Context(), request.(PostSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSegmentsSlug")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSegmentsSlugResponseObject); ok {
		return validResponse.VisitPostSegmentsSlugResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersId operation middleware
func (sh *strictHandler) PostUsersId(ctx echo.Context, id UserID) error {
	var request PostUsersIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersId(ctx.Request().Context(), request.(PostUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersIdResponseObject); ok {
		return validResponse.VisitPostUsersIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersIdSegments operation middleware
func (sh *strictHandler) GetUsersIdSegments(ctx echo.Context, id UserID) error {
	var request GetUsersIdSegmentsRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdSegments(ctx.Request().Context(), request.(GetUsersIdSegmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdSegments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersIdSegmentsResponseObject); ok {
		return validResponse.VisitGetUsersIdSegmentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersIdSegmentsSlug operation middleware
func (sh *strictHandler) DeleteUsersIdSegmentsSlug(ctx echo.Context, id UserID, slug Slug) error {
	var request DeleteUsersIdSegmentsSlugRequestObject

	request.Id = id
	request.Slug = slug

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersIdSegmentsSlug(ctx.Request().Context(), request.(DeleteUsersIdSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersIdSegmentsSlug")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersIdSegmentsSlugResponseObject); ok {
		return validResponse.VisitDeleteUsersIdSegmentsSlugResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostUsersIdSegmentsSlug operation middleware
func (sh *strictHandler) PostUsersIdSegmentsSlug(ctx echo.Context, id UserID, slug Slug) error {
	var request PostUsersIdSegmentsSlugRequestObject

	request.Id = id
	request.Slug = slug

	var body PostUsersIdSegmentsSlugJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersIdSegmentsSlug(ctx.Request().Context(), request.(PostUsersIdSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersIdSegmentsSlug")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersIdSegmentsSlugResponseObject); ok {
		return validResponse.VisitPostUsersIdSegmentsSlugResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXz2/rNgz+VwRuR+85b3uX+datRZFTB7Q7FT2oNpOosyWNpJMGgf/3QbKd307TYghy",
	"ExhR/MjvI+msIHeVdxatMGQrIPy3RpY/XGEwGh5xWqGVG2YzteEUjLmz0h2196XJtRhn0zd2Ntg4n2Gl",
	"w8mT80jSvYXv3lB7/JlwAhn8lG7Cp60bp0+mQhZdeWiaBGTpETJwr2+YCzTBVCDnZHyICRm00BS3QJU4",
	"pVXNSNAkPfo/CXV7+8vYXS2EOp99BP6hv3cW9ggMlVYWF30G0bN7LkS7I3J0pJi9uQvCQsZOo3Mg0RAW",
	"kD13114OsCTwsJXRxFGlBTKYlE4LrG/bunpFggQWZAQfbLmETKjGUNqynh4Jn8CGvu2HCy34i5gKN49v",
	"XP5mpPHt0dfCTx2L/4egEuAO9ymHmNt+JaPjy1FSjZ24iN5IGX67mRtx6gk5lHKOxC3bo2/fv40CBufR",
	"am8gg9+iKQGvZRbzSDsVcLoKAZtgK7BEwahCjxT1Oi4gg9to76rDEXSAzN5Zbqvy62jUPrAtus5BcZ3n",
	"yDypy3Kp2hhFQPdj9ONTjXKqkq14jyi/B7EwMlMyQzU1c7RqoVlZJ2rialu0nVBXlablOl2lN40S6ka6",
	"QkFiyJ4HE20rY4ItFBoSsLqKOutr1tMcxJ2cmVunkpcEvGM5pOcvx3JATj9el0Ov70zgdH+ANQcEf/+I",
	"4JbfPE6ajt/fL86v4ciCwnfDwkqXhLpY7hE8OA3TMM85XZki9sNJ0sPAUOPbsAcWjv6JAI6Tb4ovU98N",
	"rA/ID7d4XMA5nEXYlyYpBm0pOUVFu013eVjPqRB8ikcqcI99AfomGJhOZ+doBCs+h5rHzYDoprUm0ssT",
	"OmWl42cEFrsfEBeZhZGGoal3j6J0LmaOfUsMYb2mthgQy9lLbU85n95tBXoy8wvuszsjM6TIhXK0/hqN",
	"Q+/0UotA1w4TctV1cppc4XodksnXtuzWn5zmM2Lr2/EaxXbhdd8t9q2S7Kh9+L9a0zT/BQAA//87AUAU",
	"jA4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
