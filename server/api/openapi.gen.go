// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Outreach defines model for Outreach.
type Outreach = float32

// Slug defines model for Slug.
type Slug = string

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// UserID defines model for UserID.
type UserID = string

// UserSegment defines model for UserSegment.
type UserSegment struct {
	Expires *Timestamp `json:"expires,omitempty"`
	Slug    Slug       `json:"slug"`
}

// SegmentAssignment defines model for SegmentAssignment.
type SegmentAssignment struct {
	Expires *Timestamp `json:"expires,omitempty"`
}

// SegmentCreation defines model for SegmentCreation.
type SegmentCreation struct {
	Outreach *Outreach `json:"outreach,omitempty"`
}

// PostSegmentsSlugJSONBody defines parameters for PostSegmentsSlug.
type PostSegmentsSlugJSONBody struct {
	Outreach *Outreach `json:"outreach,omitempty"`
}

// PostUsersIdSegmentsSlugJSONBody defines parameters for PostUsersIdSegmentsSlug.
type PostUsersIdSegmentsSlugJSONBody struct {
	Expires *Timestamp `json:"expires,omitempty"`
}

// PostSegmentsSlugJSONRequestBody defines body for PostSegmentsSlug for application/json ContentType.
type PostSegmentsSlugJSONRequestBody PostSegmentsSlugJSONBody

// PostUsersIdSegmentsSlugJSONRequestBody defines body for PostUsersIdSegmentsSlug for application/json ContentType.
type PostUsersIdSegmentsSlugJSONRequestBody PostUsersIdSegmentsSlugJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a segment
	// (DELETE /segments/{slug})
	DeleteSegmentsSlug(w http.ResponseWriter, r *http.Request, slug Slug)
	// Create a new segment
	// (POST /segments/{slug})
	PostSegmentsSlug(w http.ResponseWriter, r *http.Request, slug Slug)
	// Create a new user
	// (POST /users/{id})
	PostUsersId(w http.ResponseWriter, r *http.Request, id UserID)
	// Get active segments assigned to a user
	// (GET /users/{id}/segments)
	GetUsersIdSegments(w http.ResponseWriter, r *http.Request, id UserID)
	// Deprive segment from a user
	// (DELETE /users/{id}/segments/{slug})
	DeleteUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request, id UserID, slug Slug)
	// Assign segment to a user
	// (POST /users/{id}/segments/{slug})
	PostUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request, id UserID, slug Slug)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Delete a segment
// (DELETE /segments/{slug})
func (_ Unimplemented) DeleteSegmentsSlug(w http.ResponseWriter, r *http.Request, slug Slug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new segment
// (POST /segments/{slug})
func (_ Unimplemented) PostSegmentsSlug(w http.ResponseWriter, r *http.Request, slug Slug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users/{id})
func (_ Unimplemented) PostUsersId(w http.ResponseWriter, r *http.Request, id UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get active segments assigned to a user
// (GET /users/{id}/segments)
func (_ Unimplemented) GetUsersIdSegments(w http.ResponseWriter, r *http.Request, id UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deprive segment from a user
// (DELETE /users/{id}/segments/{slug})
func (_ Unimplemented) DeleteUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request, id UserID, slug Slug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Assign segment to a user
// (POST /users/{id}/segments/{slug})
func (_ Unimplemented) PostUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request, id UserID, slug Slug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteSegmentsSlug operation middleware
func (siw *ServerInterfaceWrapper) DeleteSegmentsSlug(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSegmentsSlug(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSegmentsSlug operation middleware
func (siw *ServerInterfaceWrapper) PostSegmentsSlug(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSegmentsSlug(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersId operation middleware
func (siw *ServerInterfaceWrapper) PostUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersIdSegments operation middleware
func (siw *ServerInterfaceWrapper) GetUsersIdSegments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersIdSegments(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUsersIdSegmentsSlug operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersIdSegmentsSlug(w, r, id, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersIdSegmentsSlug operation middleware
func (siw *ServerInterfaceWrapper) PostUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersIdSegmentsSlug(w, r, id, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/segments/{slug}", wrapper.DeleteSegmentsSlug)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/segments/{slug}", wrapper.PostSegmentsSlug)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}", wrapper.PostUsersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}/segments", wrapper.GetUsersIdSegments)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{id}/segments/{slug}", wrapper.DeleteUsersIdSegmentsSlug)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/segments/{slug}", wrapper.PostUsersIdSegmentsSlug)
	})

	return r
}

type DeleteSegmentsSlugRequestObject struct {
	Slug Slug `json:"slug"`
}

type DeleteSegmentsSlugResponseObject interface {
	VisitDeleteSegmentsSlugResponse(w http.ResponseWriter) error
}

type DeleteSegmentsSlug200Response struct {
}

func (response DeleteSegmentsSlug200Response) VisitDeleteSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSegmentsSlug404Response struct {
}

func (response DeleteSegmentsSlug404Response) VisitDeleteSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostSegmentsSlugRequestObject struct {
	Slug Slug `json:"slug"`
	Body *PostSegmentsSlugJSONRequestBody
}

type PostSegmentsSlugResponseObject interface {
	VisitPostSegmentsSlugResponse(w http.ResponseWriter) error
}

type PostSegmentsSlug201Response struct {
}

func (response PostSegmentsSlug201Response) VisitPostSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostSegmentsSlug409Response struct {
}

func (response PostSegmentsSlug409Response) VisitPostSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type PostUsersIdRequestObject struct {
	Id UserID `json:"id"`
}

type PostUsersIdResponseObject interface {
	VisitPostUsersIdResponse(w http.ResponseWriter) error
}

type PostUsersId201Response struct {
}

func (response PostUsersId201Response) VisitPostUsersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostUsersId409Response struct {
}

func (response PostUsersId409Response) VisitPostUsersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetUsersIdSegmentsRequestObject struct {
	Id UserID `json:"id"`
}

type GetUsersIdSegmentsResponseObject interface {
	VisitGetUsersIdSegmentsResponse(w http.ResponseWriter) error
}

type GetUsersIdSegments200JSONResponse []UserSegment

func (response GetUsersIdSegments200JSONResponse) VisitGetUsersIdSegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdSegments404Response struct {
}

func (response GetUsersIdSegments404Response) VisitGetUsersIdSegmentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteUsersIdSegmentsSlugRequestObject struct {
	Id   UserID `json:"id"`
	Slug Slug   `json:"slug"`
}

type DeleteUsersIdSegmentsSlugResponseObject interface {
	VisitDeleteUsersIdSegmentsSlugResponse(w http.ResponseWriter) error
}

type DeleteUsersIdSegmentsSlug200Response struct {
}

func (response DeleteUsersIdSegmentsSlug200Response) VisitDeleteUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUsersIdSegmentsSlug404Response struct {
}

func (response DeleteUsersIdSegmentsSlug404Response) VisitDeleteUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUsersIdSegmentsSlugRequestObject struct {
	Id   UserID `json:"id"`
	Slug Slug   `json:"slug"`
	Body *PostUsersIdSegmentsSlugJSONRequestBody
}

type PostUsersIdSegmentsSlugResponseObject interface {
	VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error
}

type PostUsersIdSegmentsSlug200Response struct {
}

func (response PostUsersIdSegmentsSlug200Response) VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostUsersIdSegmentsSlug404Response struct {
}

func (response PostUsersIdSegmentsSlug404Response) VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUsersIdSegmentsSlug409Response struct {
}

func (response PostUsersIdSegmentsSlug409Response) VisitPostUsersIdSegmentsSlugResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a segment
	// (DELETE /segments/{slug})
	DeleteSegmentsSlug(ctx context.Context, request DeleteSegmentsSlugRequestObject) (DeleteSegmentsSlugResponseObject, error)
	// Create a new segment
	// (POST /segments/{slug})
	PostSegmentsSlug(ctx context.Context, request PostSegmentsSlugRequestObject) (PostSegmentsSlugResponseObject, error)
	// Create a new user
	// (POST /users/{id})
	PostUsersId(ctx context.Context, request PostUsersIdRequestObject) (PostUsersIdResponseObject, error)
	// Get active segments assigned to a user
	// (GET /users/{id}/segments)
	GetUsersIdSegments(ctx context.Context, request GetUsersIdSegmentsRequestObject) (GetUsersIdSegmentsResponseObject, error)
	// Deprive segment from a user
	// (DELETE /users/{id}/segments/{slug})
	DeleteUsersIdSegmentsSlug(ctx context.Context, request DeleteUsersIdSegmentsSlugRequestObject) (DeleteUsersIdSegmentsSlugResponseObject, error)
	// Assign segment to a user
	// (POST /users/{id}/segments/{slug})
	PostUsersIdSegmentsSlug(ctx context.Context, request PostUsersIdSegmentsSlugRequestObject) (PostUsersIdSegmentsSlugResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteSegmentsSlug operation middleware
func (sh *strictHandler) DeleteSegmentsSlug(w http.ResponseWriter, r *http.Request, slug Slug) {
	var request DeleteSegmentsSlugRequestObject

	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSegmentsSlug(ctx, request.(DeleteSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSegmentsSlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSegmentsSlugResponseObject); ok {
		if err := validResponse.VisitDeleteSegmentsSlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostSegmentsSlug operation middleware
func (sh *strictHandler) PostSegmentsSlug(w http.ResponseWriter, r *http.Request, slug Slug) {
	var request PostSegmentsSlugRequestObject

	request.Slug = slug

	var body PostSegmentsSlugJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSegmentsSlug(ctx, request.(PostSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSegmentsSlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSegmentsSlugResponseObject); ok {
		if err := validResponse.VisitPostSegmentsSlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostUsersId operation middleware
func (sh *strictHandler) PostUsersId(w http.ResponseWriter, r *http.Request, id UserID) {
	var request PostUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersId(ctx, request.(PostUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersIdResponseObject); ok {
		if err := validResponse.VisitPostUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetUsersIdSegments operation middleware
func (sh *strictHandler) GetUsersIdSegments(w http.ResponseWriter, r *http.Request, id UserID) {
	var request GetUsersIdSegmentsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdSegments(ctx, request.(GetUsersIdSegmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdSegments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdSegmentsResponseObject); ok {
		if err := validResponse.VisitGetUsersIdSegmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteUsersIdSegmentsSlug operation middleware
func (sh *strictHandler) DeleteUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request, id UserID, slug Slug) {
	var request DeleteUsersIdSegmentsSlugRequestObject

	request.Id = id
	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersIdSegmentsSlug(ctx, request.(DeleteUsersIdSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersIdSegmentsSlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUsersIdSegmentsSlugResponseObject); ok {
		if err := validResponse.VisitDeleteUsersIdSegmentsSlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostUsersIdSegmentsSlug operation middleware
func (sh *strictHandler) PostUsersIdSegmentsSlug(w http.ResponseWriter, r *http.Request, id UserID, slug Slug) {
	var request PostUsersIdSegmentsSlugRequestObject

	request.Id = id
	request.Slug = slug

	var body PostUsersIdSegmentsSlugJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersIdSegmentsSlug(ctx, request.(PostUsersIdSegmentsSlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersIdSegmentsSlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersIdSegmentsSlugResponseObject); ok {
		if err := validResponse.VisitPostUsersIdSegmentsSlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/bOBD9K8TsHrWRs82luqVNEfiUAklPQQ6MNLaZSiTLGdkxDP33YijJH4llO0EO",
	"uREUZ+bxveEbrSB3lXcWLRNkKwj4p0bib64wGDducVqh5UsiM7Wyks3cWe6W2vvS5JqNs+kTOSt7lM+w",
	"0rLywXkM3OXCZ29Cu/w34AQy+CfdlE/bMErvTIXEuvLQNAnw0iNk4B6fMGdoZKtAyoPxUhMyaKEpaoEq",
	"dkqrmjBAk/TovwfU7el3Y3c1B9T57Bj4m/7cSdgjMFRaWVz0N4iRXTqpdrNVeeJCpRkymJROM6wr2Lp6",
	"xAAJLIJhvLHlEjIONQoFZT2V0O4kcTB2KtxsaN5OXGjG/9hUuEm+CflFGMZXe7PJp47tjxA+AepwHwqI",
	"dxO6pG1NwAKy+zbwYS/5xk5cRG+4lG+Xc8NO3SEJlXMM1KoyOjs/GwkG59FqbyCDL3ErAa95Fu+RdmpR",
	"upKCjewVWCJj7BaPIfbVuIAMruJ+xw5F0AKZvLPUsvL/aNQm2G6OLkBRnedINKnLcqnaGoWguxhdDAct",
	"DM8Uz1BNzRytWmhS1rGauNoWbYfVVaXDcg1P6U0Dyj2DrpAxEGT3g8DamxjZE2IgAaur2Bf9HXtZpBmT",
	"rcd1gqoPCXhH/JrOn474FZm9bS2Hsu84W/rSGJpXgpwfE6TVI48vuNPj61E9DEXWFD4bYlK6DKiL5QtB",
	"Bl0hFV+jdGWK2G8HRZIHqcZX4ocLF35HAPvFMsW7peoM4YhYcorGBZzCcYR9jNR4qKXwEHXtFNjlbf1u",
	"JesU9yC+xh5w32QDr/XkSWIYKzqFytvNA+zcS4egl/smR49N6Tj+sNgdfHu9IdI25ALXyErnbObYt9xQ",
	"7s/UdgPinmzKL5R+szcX6IOZH/DjH4ZnGCJ3yoX1X0o0gcOmHBOvAybBVZ9Tg+QTjochWd83JbZ+fpu3",
	"NEf/fD6iOY6Ml26QbJXc6abhf+Smaf4GAAD//+ykHS4EDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
